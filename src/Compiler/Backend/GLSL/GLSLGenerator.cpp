/*
 * GLSLGenerator.cpp
 * 
 * This file is part of the XShaderCompiler project (Copyright (c) 2014-2016 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

#include "GLSLGenerator.h"
#include "GLSLExtensionAgent.h"
#include "GLSLConverter.h"
#include "GLSLKeywords.h"
#include "GLSLIntrinsics.h"
#include "GLSLHelper.h"
#include "ReferenceAnalyzer.h"
#include "ControlPathAnalyzer.h"
#include "TypeDenoter.h"
#include "AST.h"
#include "Exception.h"
#include "Helper.h"
#include <initializer_list>
#include <algorithm>
#include <cctype>
#include <set>


namespace Xsc
{


GLSLGenerator::GLSLGenerator(Log* log) :
    Generator{ log }
{
}

void GLSLGenerator::GenerateCodePrimary(
    Program& program, const ShaderInput& inputDesc, const ShaderOutput& outputDesc)
{
    /* Store parameters */
    shaderTarget_       = inputDesc.shaderTarget;
    versionOut_         = outputDesc.shaderVersion;
    allowExtensions_    = outputDesc.options.allowExtensions;
    explicitBinding_    = outputDesc.options.explicitBinding;
    preserveComments_   = outputDesc.options.preserveComments;
    allowLineMarks_     = outputDesc.formatting.lineMarks;
    compactWrappers_    = outputDesc.formatting.compactWrappers;
    newLineOpenScope_   = outputDesc.formatting.newLineOpenScope;
    nameManglingPrefix_ = outputDesc.formatting.prefix;

    if (program.entryPointRef)
    {
        try
        {
            /* Mark all control paths */
            {
                ControlPathAnalyzer pathAnalyzer;
                pathAnalyzer.MarkControlPaths(program);
            }

            /* Convert AST for GLSL code generation */
            {
                GLSLConverter converter;
                converter.Convert(program, inputDesc.shaderTarget, outputDesc.formatting.prefix);
            }

            /* Mark all reachable AST nodes */
            {
                ReferenceAnalyzer refAnalyzer;
                refAnalyzer.MarkReferencesFromEntryPoint(program);
            }

            /* Write header */
            if (inputDesc.entryPoint.empty())
                WriteComment("GLSL " + ToString(shaderTarget_));
            else
                WriteComment("GLSL " + ToString(shaderTarget_) + " \"" + inputDesc.entryPoint + "\"");
        
            WriteComment("Generated by XShaderCompiler");

            WriteComment(TimePoint());
            Blank();

            /* Visit program AST */
            Visit(&program);
        }
        catch (const Report& e)
        {
            throw e;
        }
        catch (const ASTRuntimeError& e)
        {
            Error(e.what(), e.GetAST());
        }
        catch (const std::exception& e)
        {
            Error(e.what());
        }
    }
    else
        Error("entry point \"" + inputDesc.entryPoint + "\" not found");
}


/*
 * ======= Private: =======
 */

bool GLSLGenerator::MustResolveStruct(StructDecl* ast) const
{
    return MustResolveStructForTarget(shaderTarget_, ast);
}

std::unique_ptr<std::string> GLSLGenerator::SystemValueToKeyword(const IndexedSemantic& semantic) const
{
    if (semantic == Semantic::Target && versionOut_ > OutputShaderVersion::GLSL120)
        return MakeUnique<std::string>(semantic.ToString());
    else
        return SemanticToGLSLKeyword(semantic, IsVKSL());
}

bool GLSLGenerator::IsWrappedIntrinsic(const Intrinsic intrinsic) const
{
    static const std::set<Intrinsic> wrappedIntrinsics
    {
        Intrinsic::Clip,
    };
    return (wrappedIntrinsics.find(intrinsic) != wrappedIntrinsics.end());
}

bool GLSLGenerator::IsESSL() const
{
    return IsLanguageESSL(versionOut_);
}

bool GLSLGenerator::IsVKSL() const
{
    return IsLanguageVKSL(versionOut_);
}

const std::string* GLSLGenerator::BufferTypeToKeyword(const BufferType bufferType, const AST* ast)
{
    if (auto keyword = BufferTypeToGLSLKeyword(bufferType, IsVKSL()))
        return keyword;
    else
        Error("failed to map buffer type to GLSL sampler type", ast);
    return nullptr;
}

const std::string* GLSLGenerator::SamplerTypeToKeyword(const SamplerType samplerType, const AST* ast)
{
    if (auto keyword = SamplerTypeToGLSLKeyword(samplerType, IsVKSL()))
        return keyword;
    else
        Error("failed to map sampler type to GLSL sampler type", ast);
    return nullptr;
}

bool GLSLGenerator::IsTypeCompatibleWithSemantic(const Semantic semantic, const TypeDenoter& typeDenoter)
{
    if (auto baseTypeDen = typeDenoter.As<BaseTypeDenoter>())
    {
        auto dataType = baseTypeDen->dataType;

        switch (semantic)
        {
            case Semantic::DispatchThreadID:
            case Semantic::GroupID:
            case Semantic::GroupThreadID:
                return (dataType == DataType::UInt3);

            case Semantic::GroupIndex:
                return (dataType == DataType::UInt);

            case Semantic::GSInstanceID:
            case Semantic::InstanceID:
            case Semantic::OutputControlPointID:
            case Semantic::PrimitiveID:
            case Semantic::SampleIndex:
            case Semantic::VertexID:
                return (dataType == DataType::Int);

            default:
                break;
        }
        return true;
    }
    return false;
}

/* ------- Visit functions ------- */

#define IMPLEMENT_VISIT_PROC(AST_NAME) \
    void GLSLGenerator::Visit##AST_NAME(AST_NAME* ast, void* args)

IMPLEMENT_VISIT_PROC(Program)
{
    /* Write version and required extensions first */
    WriteProgramHeader();

    /* Write global input/output layouts */
    WriteGlobalLayouts();

    /* Write wrapper functions for special intrinsics */
    WriteWrapperIntrinsics();

    /* Write global input/output semantics and uniforms */
    if (shaderTarget_ == ShaderTarget::VertexShader)
        WriteGlobalInputSemantics();
    else if (shaderTarget_ == ShaderTarget::FragmentShader)
        WriteGlobalOutputSemantics();

    WriteGlobalUniforms();

    /* Write global program statements */
    WriteStmntList(ast->globalStmnts, true);
}

IMPLEMENT_VISIT_PROC(CodeBlock)
{
    WriteScopeOpen();
    {
        WriteStmntList(ast->stmnts);
    }
    WriteScopeClose();
}

IMPLEMENT_VISIT_PROC(FunctionCall)
{
    if (ast->intrinsic == Intrinsic::Mul)
        WriteFunctionCallIntrinsicMul(ast);
    else if (ast->intrinsic == Intrinsic::Rcp)
        WriteFunctionCallIntrinsicRcp(ast);
    else if (ast->intrinsic == Intrinsic::Clip && ast->flags(FunctionCall::canInlineIntrinsicWrapper))
        WriteFunctionCallIntrinsicClip(ast);
    else if (ast->intrinsic >= Intrinsic::InterlockedAdd && ast->intrinsic <= Intrinsic::InterlockedXor)
        WriteFunctionCallIntrinsicAtomic(ast);
    else
        WriteFunctionCallStandard(ast);
}

IMPLEMENT_VISIT_PROC(SwitchCase)
{
    /* Write case header */
    if (ast->expr)
    {
        BeginLn();
        {
            Write("case ");
            Visit(ast->expr);
            Write(":");
        }
        EndLn();
    }
    else
        WriteLn("default:");

    /* Write statement list */
    IncIndent();
    {
        Visit(ast->stmnts);
    }
    DecIndent();
}

/* --- Variables --- */

IMPLEMENT_VISIT_PROC(VarType)
{
    if (ast->structDecl)
        Visit(ast->structDecl);
    else
        WriteTypeDenoter(*ast->typeDenoter, IsESSL(), ast);
}

IMPLEMENT_VISIT_PROC(VarIdent)
{
    WriteVarIdent(ast);
}

/* --- Declarations --- */

IMPLEMENT_VISIT_PROC(VarDecl)
{
    Write(ast->ident);
    WriteArrayDims(ast->arrayDims);

    if (ast->initializer)
    {
        Write(" = ");
        Visit(ast->initializer);
    }
}

IMPLEMENT_VISIT_PROC(StructDecl)
{
    if (!MustResolveStruct(ast))
    {
        bool semicolon = (args != nullptr ? *reinterpret_cast<bool*>(&args) : false);

        /* Write all nested structures (if this is the root structure) */
        if (!ast->flags(StructDecl::isNestedStruct))
        {
            /* Write nested structres in child-to-parent order */
            for (auto nestedStruct = ast->nestedStructDeclRefs.rbegin(); nestedStruct != ast->nestedStructDeclRefs.rend(); ++nestedStruct)
            {
                WriteStructDecl(*nestedStruct, true, true);
                Blank();
            }
        }

        /* Write declaration of this structure (without nested structures) */
        WriteStructDecl(ast, semicolon);
    }
}

/* --- Declaration statements --- */

IMPLEMENT_VISIT_PROC(FunctionDecl)
{
    /* Is this function reachable from the entry point? */
    if (!ast->flags(AST::isReachable))
    {
        /* Check for valid control paths */
        if (ast->flags(FunctionDecl::hasNonReturnControlPath))
            Warning("not all control paths in unreferenced function '" + ast->ident + "' return a value", ast);
        return;
    }

    /* Check for valid control paths */
    if (ast->flags(FunctionDecl::hasNonReturnControlPath))
        Error("not all control paths in function '" + ast->ident + "' return a value", ast);

    /* Write line */
    WriteLineMark(ast);

    /* Write function header */
    BeginLn();
    {
        if (ast->flags(FunctionDecl::isEntryPoint))
            Write("void main()");
        else
        {
            Visit(ast->returnType);
            Write(" " + ast->ident + "(");

            /* Write parameters */
            for (size_t i = 0; i < ast->parameters.size(); ++i)
            {
                WriteParameter(ast->parameters[i].get());
                if (i + 1 < ast->parameters.size())
                    Write(", ");
            }

            Write(")");

            if (!ast->codeBlock)
            {
                /*
                This is only a function forward declaration
                -> finish with line terminator
                */
                Write(";");
            }
        }
    }
    EndLn();

    if (ast->codeBlock)
    {
        /* Write function body */
        if (ast->flags(FunctionDecl::isEntryPoint))
        {
            WriteScopeOpen();
            {
                /* Write input/output parameters of system values as local variables */
                WriteLocalInputSemantics();
                WriteLocalOutputSemantics();

                /* Write code block (without additional scope) */
                isInsideEntryPoint_ = true;
                {
                    WriteStmntList(ast->codeBlock->stmnts);
                }
                isInsideEntryPoint_ = false;

                /* Is the last statement a return statement? (ignore if the function has a non-void return type) */
                if ( ast->HasVoidReturnType() && ( ast->codeBlock->stmnts.empty() || ast->codeBlock->stmnts.back()->Type() != AST::Types::ReturnStmnt ) )
                {
                    /* Write output semantic at the end of the code block, if no return statement was written before */
                    WriteOutputSemanticsAssignment(nullptr);
                }
            }
            WriteScopeClose();
        }
        else
        {
            /* Write default code block */
            Visit(ast->codeBlock);
        }
    }

    Blank();
}

IMPLEMENT_VISIT_PROC(UniformBufferDecl)
{
    if (!ast->flags(AST::isReachable))
        return;

    /* Write uniform buffer header */
    WriteLineMark(ast);

    BeginLn();
    {
        /* Write uniform buffer declaration */
        Write("layout(std140");

        if (explicitBinding_)
        {
            if (auto slotRegister = Register::GetForTarget(ast->slotRegisters, shaderTarget_))
                Write(", binding = " + std::to_string(slotRegister->slot));
        }

        Write(") uniform ");
        Write(ast->ident);
    }
    EndLn();

    WriteScopeOpen();
    {
        Visit(ast->members);
    }
    WriteScopeClose(false, true);

    Blank();
}

IMPLEMENT_VISIT_PROC(BufferDeclStmnt)
{
    if (ast->flags(AST::isReachable))
    {
        /* Write buffer declarations */
        for (auto& bufferDecl : ast->bufferDecls)
            WriteBufferDecl(bufferDecl.get());
    }
}

IMPLEMENT_VISIT_PROC(StructDeclStmnt)
{
    if (!ast->structDecl->flags(AST::isReachable))
        return;

    if (!MustResolveStruct(ast->structDecl.get()))
    {
        WriteLineMark(ast);

        bool semicolon = true;
        Visit(ast->structDecl, &semicolon);

        Blank();
    }
}

IMPLEMENT_VISIT_PROC(VarDeclStmnt)
{
    auto varDecls = ast->varDecls;

    //TODO: refactor this!
    #if 1
    for (auto it = varDecls.begin(); it != varDecls.end();)
    {
        /*
        First check if code generation is disabled for variable declaration,
        then check if this is a system value semantic inside an interface block.
        */
        if ( (*it)->flags(VarDecl::disableCodeGen) ||
             ( isInsideInterfaceBlock_ && (*it)->semantic.IsSystemValue() ) )
        {
            /*
            Code generation is disabled for this variable declaration
            -> Remove this from the list
            */
            it = varDecls.erase(it);
        }
        else
            ++it;
    }

    if (varDecls.empty())
    {
        /*
        All variable declarations within this statement are disabled
        -> Break code generation here
        */
        return;
    }
    #endif

    BeginLn();

    /* Write input modifiers */
    if (ast->flags(VarDeclStmnt::isShaderInput))
        Write("in ");
    else if (ast->flags(VarDeclStmnt::isShaderOutput))
        Write("out ");
    else if (ast->isUniform)
        Write("uniform ");

    /* Write storage classes */
    for (auto storageClass : ast->storageClasses)
    {
        if (auto keyword = StorageClassToGLSLKeyword(storageClass))
            Write(*keyword + " ");
        else
            Warning("not all storage classes can be mapped to GLSL keywords", ast);
    }

    /* Write interpolation modifiers */
    for (auto interpModifier : ast->interpModifiers)
    {
        if (auto keyword = InterpModifierToGLSLKeyword(interpModifier))
            Write(*keyword + " ");
        else
            Warning("not all interpolation modifiers can be mapped to GLSL keywords", ast);
    }

    /* Write type modifiers */
    WriteTypeModifiers(ast->typeModifiers);

    /* Write variable type */
    if (ast->varType->structDecl)
    {
        /* Do not end line here with "EndLn" */
        Visit(ast->varType);
        BeginLn();
    }
    else
    {
        Visit(ast->varType);
        Write(" ");
    }

    /* Write variable declarations */
    for (size_t i = 0; i < varDecls.size(); ++i)
    {
        Visit(varDecls[i]);
        if (i + 1 < varDecls.size())
            Write(", ");
    }

    Write(";");
    EndLn();
}

IMPLEMENT_VISIT_PROC(AliasDeclStmnt)
{
    if (ast->structDecl && !ast->structDecl->IsAnonymous())
    {
        WriteLineMark(ast);

        bool semicolon = true;
        Visit(ast->structDecl, &semicolon);

        Blank();
    }
}

/* --- Statements --- */

IMPLEMENT_VISIT_PROC(NullStmnt)
{
    WriteLn(";");
}

IMPLEMENT_VISIT_PROC(CodeBlockStmnt)
{
    Visit(ast->codeBlock);
}

IMPLEMENT_VISIT_PROC(ForLoopStmnt)
{
    /* Write loop header */
    BeginLn();
    {
        Write("for (");

        PushOptions({ false, false });
        {
            Visit(ast->initSmnt);
            Write(" "); // initStmnt already has the ';'!
            Visit(ast->condition);
            Write("; ");
            Visit(ast->iteration);
        }
        PopOptions();

        Write(")");
    }
    EndLn();

    WriteScopedStmnt(ast->bodyStmnt.get());
}

IMPLEMENT_VISIT_PROC(WhileLoopStmnt)
{
    /* Write loop condExpr */
    BeginLn();
    {
        Write("while (");
        Visit(ast->condition);
        Write(")");
    }
    EndLn();

    WriteScopedStmnt(ast->bodyStmnt.get());
}

IMPLEMENT_VISIT_PROC(DoWhileLoopStmnt)
{
    WriteLn("do");
    WriteScopedStmnt(ast->bodyStmnt.get());

    /* Write loop condExpr */
    BeginLn();
    {
        Write("while (");
        Visit(ast->condition);
        Write(");");
    }
    EndLn();
}

IMPLEMENT_VISIT_PROC(IfStmnt)
{
    bool hasElseParentNode = (args != nullptr ? *reinterpret_cast<bool*>(&args) : false);

    /* Write if condExpr */
    if (!hasElseParentNode)
        BeginLn();
    
    Write("if (");
    Visit(ast->condition);
    Write(")");
    
    EndLn();

    /* Write if body */
    WriteScopedStmnt(ast->bodyStmnt.get());

    Visit(ast->elseStmnt);
}

IMPLEMENT_VISIT_PROC(ElseStmnt)
{
    if (ast->bodyStmnt->Type() == AST::Types::IfStmnt)
    {
        /* Write else if statement */
        BeginLn();
        Write("else ");

        bool hasElseParentNode = true;
        Visit(ast->bodyStmnt, &hasElseParentNode);
    }
    else
    {
        /* Write else statement */
        WriteLn("else");
        WriteScopedStmnt(ast->bodyStmnt.get());
    }
}

IMPLEMENT_VISIT_PROC(SwitchStmnt)
{
    /* Write selector */
    BeginLn();
    {
        Write("switch (");
        Visit(ast->selector);
        Write(")");
    }
    EndLn();

    /* Write switch cases */
    WriteScopeOpen();
    {
        Visit(ast->cases);
    }
    WriteScopeClose();
}

IMPLEMENT_VISIT_PROC(ExprStmnt)
{
    BeginLn();
    {
        Visit(ast->expr);
        Write(";");
    }
    EndLn();
}

IMPLEMENT_VISIT_PROC(ReturnStmnt)
{
    if (isInsideEntryPoint_)
    {
        /* Write all output semantics assignment with the expression of the return statement */
        WriteOutputSemanticsAssignment(ast->expr.get());

        /* Is this return statement at the end of the function scope? */
        if (!ast->flags(ReturnStmnt::isEndOfFunction))
            WriteLn("return;");
    }
    else
    {
        if (ast->expr)
        {
            BeginLn();
            {
                Write("return ");
                Visit(ast->expr);
                Write(";");
            }
            EndLn();
        }
        else if (!ast->flags(ReturnStmnt::isEndOfFunction))
            WriteLn("return;");
    }
}

IMPLEMENT_VISIT_PROC(CtrlTransferStmnt)
{
    WriteLn(CtrlTransformToString(ast->transfer) + ";");
}

/* --- Expressions --- */

IMPLEMENT_VISIT_PROC(ListExpr)
{
    Visit(ast->firstExpr);
    Write(", ");
    Visit(ast->nextExpr);
}

IMPLEMENT_VISIT_PROC(LiteralExpr)
{
    Write(ast->value);
}

IMPLEMENT_VISIT_PROC(TypeNameExpr)
{
    WriteTypeDenoter(*ast->typeDenoter, false, ast);
}

IMPLEMENT_VISIT_PROC(TernaryExpr)
{
    Visit(ast->condExpr);
    Write(" ? ");
    Visit(ast->thenExpr);
    Write(" : ");
    Visit(ast->elseExpr);
}

IMPLEMENT_VISIT_PROC(BinaryExpr)
{
    Visit(ast->lhsExpr);
    Write(" " + BinaryOpToString(ast->op) + " ");
    Visit(ast->rhsExpr);
}

IMPLEMENT_VISIT_PROC(UnaryExpr)
{
    Write(UnaryOpToString(ast->op));
    Visit(ast->expr);
}

IMPLEMENT_VISIT_PROC(PostUnaryExpr)
{
    Visit(ast->expr);
    Write(UnaryOpToString(ast->op));
}

IMPLEMENT_VISIT_PROC(FunctionCallExpr)
{
    Visit(ast->call);
}

IMPLEMENT_VISIT_PROC(BracketExpr)
{
    Write("(");
    Visit(ast->expr);
    Write(")");
}

IMPLEMENT_VISIT_PROC(SuffixExpr)
{
    auto typeDenoter = ast->expr->GetTypeDenoter()->Get();

    /*
    First write all scalar swizzle operations as vector constructors,
    e.g. "1.0.xxxx" -> "vec4(1.0)", or "1.0.xx.y.xxx" -> "vec3(vec2(1.0).y)"
    */
    WriteSuffixVarIdentBegin(*typeDenoter, ast->varIdent.get());

    /* Write left-hand-side expression of suffix */
    Visit(ast->expr);

    /* Write suffix identifiers with optional vector constructor endings (i.e. closing ')' brackets) */
    WriteSuffixVarIdentEnd(*typeDenoter, ast->varIdent.get());
}

IMPLEMENT_VISIT_PROC(ArrayAccessExpr)
{
    Visit(ast->expr);
    WriteArrayDims(ast->arrayIndices);
}

IMPLEMENT_VISIT_PROC(CastExpr)
{
    Visit(ast->typeExpr);
    Write("(");
    Visit(ast->expr);
    Write(")");
}

IMPLEMENT_VISIT_PROC(VarAccessExpr)
{
    //WriteVarIdentOrSystemValue(ast->varIdent.get());
    Visit(ast->varIdent);
    if (ast->assignExpr)
    {
        Write(" " + AssignOpToString(ast->assignOp) + " ");
        Visit(ast->assignExpr);
    }
}

IMPLEMENT_VISIT_PROC(InitializerExpr)
{
    Write("{ ");
        
    for (size_t i = 0; i < ast->exprs.size(); ++i)
    {
        Visit(ast->exprs[i]);
        if (i + 1 < ast->exprs.size())
            Write(", ");
    }

    Write(" }");
}

#undef IMPLEMENT_VISIT_PROC

/* --- Helper functions for code generation --- */

/* --- Basics --- */

void GLSLGenerator::WriteComment(const std::string& text)
{
    std::size_t start = 0, end = 0;

    while (end < text.size())
    {
        /* Get next comment line */
        end = text.find('\n', start);

        auto line = (end < text.size() ? text.substr(start, end - start) : text.substr(start));

        #if 0
        /* Get line boundaries */
        bool firstLine  = (start == 0);
        bool lastLine   = (end == std::string::npos);
        #endif

        /* Write comment line */
        BeginLn();
        {
            Write("// ");
            Write(line);
        }
        EndLn();

        start = end + 1;
    }
}

void GLSLGenerator::WriteLineMark(int lineNumber)
{
    if (allowLineMarks_)
        WriteLn("#line " + std::to_string(lineNumber));
}

void GLSLGenerator::WriteLineMark(const TokenPtr& tkn)
{
    WriteLineMark(tkn->Pos().Row());
}

void GLSLGenerator::WriteLineMark(const AST* ast)
{
    WriteLineMark(ast->area.Pos().Row());
}

void GLSLGenerator::WriteScopeOpen(bool compact)
{
    if (compact)
    {
        /* Write new scope into same line */
        Write(" { ");
    }
    else if (newLineOpenScope_)
    {
        /* Write new scope into same line, and increment indentation */
        if (IsOpenLine())
        {
            Write(" {");
            EndLn();
            IncIndent();
            BeginLn();
        }
        else
        {
            WriteLn("{");
            IncIndent();
        }
    }
    else
    {
        /* Write new scope into new line, and increment indentation */
        if (IsOpenLine())
        {
            EndLn();
            WriteLn("{");
            IncIndent();
            BeginLn();
        }
        else
        {
            WriteLn("{");
            IncIndent();
        }
    }
}

void GLSLGenerator::WriteScopeClose(bool compact, bool semicolon)
{
    if (compact)
    {
        /* Write scope ending into same line */
        Write(semicolon ? " };" : " }");
    }
    else
    {
        bool open = IsOpenLine();
        if (open)
            EndLn();

        /* Decrement indentation, and write scope ending into new line */
        DecIndent();
        WriteLn(semicolon ? "};" : "}");
    }
}

/* --- Program --- */

void GLSLGenerator::WriteProgramHeader()
{
    try
    {
        /* Determine all required GLSL extensions with the GLSL extension agent */
        GLSLExtensionAgent extensionAgent;
        auto requiredExtensions = extensionAgent.DetermineRequiredExtensions(
            *GetProgram(), versionOut_, shaderTarget_, allowExtensions_, explicitBinding_
        );

        /* Write GLSL version */
        WriteProgramHeaderVersion();
        Blank();

        /* Write all required extensions */
        if (!requiredExtensions.empty())
        {
            for (const auto& ext : requiredExtensions)
                WriteProgramHeaderExtension(ext);
            Blank();
        }
    }
    catch (const std::exception& e)
    {
        Error(e.what());
    }
}

void GLSLGenerator::WriteProgramHeaderVersion()
{
    /* Convert output shader version into GLSL version number */
    int versionNumber = (static_cast<int>(versionOut_)) & static_cast<int>(OutputShaderVersion::GLSL);
    WriteLn("#version " + std::to_string(versionNumber));
}

void GLSLGenerator::WriteProgramHeaderExtension(const std::string& extensionName)
{
    WriteLn("#extension " + extensionName + " : enable");// "require" or "enable"
}

/* --- Attributes --- */

void GLSLGenerator::WriteGlobalLayouts()
{
    bool layoutsWritten = false;
    auto program = GetProgram();

    /* Write 'gl_FragCoord' layout */
    if (shaderTarget_ == ShaderTarget::FragmentShader && program->flags(Program::isFragCoordUsed))
    {
        WriteGlobalLayoutFragCoord();
        layoutsWritten = true;
    }

    /* Write global layouts from entry point attributes */
    if (WriteEntryPointAttributes())
        layoutsWritten = true;

    if (layoutsWritten)
        Blank();
}

void GLSLGenerator::WriteGlobalLayoutFragCoord()
{
    BeginLn();
    {
        Write("layout(origin_upper_left");
        if (GetProgram()->flags(Program::hasSM3ScreenSpace))
            Write(", pixel_center_integer");
        Write(") in vec4 gl_FragCoord;");
    }
    EndLn();
}

bool GLSLGenerator::WriteEntryPointAttributes()
{
    auto entryPoint = GetProgram()->entryPointRef;

    /* Write entry point attributes */
    if (!entryPoint->attribs.empty())
    {
        for (auto& attrib : entryPoint->attribs)
            WriteAttribute(attrib.get());
        return true;
    }

    return false;
}

void GLSLGenerator::WriteAttribute(Attribute* ast)
{
    switch (ast->attributeType)
    {
        case AttributeType::NumThreads:
            WriteAttributeNumThreads(ast);
            break;
        case AttributeType::EarlyDepthStencil:
            WriteAttributeEarlyDepthStencil();
            break;
        default:
            // ignore other attributes
            break;
    }
}

void GLSLGenerator::WriteAttributeNumThreads(Attribute* ast)
{
    if (ast->arguments.size() == 3)
    {
        BeginLn();
        {
            Write("layout(local_size_x = ");
            WriteAttributeNumThreadsArgument(ast->arguments[0].get());

            Write(", local_size_y = ");
            WriteAttributeNumThreadsArgument(ast->arguments[1].get());

            Write(", local_size_z = ");
            WriteAttributeNumThreadsArgument(ast->arguments[2].get());

            Write(") in;");
        }
        EndLn();
    }
    else
        ErrorInvalidNumArgs("\"numthreads\" attribute", ast);
}

void GLSLGenerator::WriteAttributeNumThreadsArgument(Expr* ast)
{
    auto value = EvaluateConstExprInt(*ast);
    if (value > 0)
        Write(std::to_string(value));
    else
        Error("number of threads must be greater than zero", ast);
}

void GLSLGenerator::WriteAttributeEarlyDepthStencil()
{
    WriteLn("layout(early_fragment_tests) in;");
}

/* --- Input semantics --- */

void GLSLGenerator::WriteLocalInputSemantics()
{
    auto& varDeclRefs = GetProgram()->entryPointRef->inputSemantics.varDeclRefsSV;

    for (auto varDecl : varDeclRefs)
        WriteLocalInputSemanticsVarDecl(varDecl);

    if (!varDeclRefs.empty())
        Blank();
}

void GLSLGenerator::WriteLocalInputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Is semantic of the variable declaration a system value semantic? */
    if (auto semanticKeyword = SystemValueToKeyword(varDecl->semantic))
    {
        /* Write local variable definition statement */
        BeginLn();
        {
            /* Write desired variable type and identifier */
            auto varType = varDecl->declStmntRef->varType.get();

            Visit(varType);
            Write(" " + varDecl->ident + " = ");

            /* Is a type conversion required? */
            if (!IsTypeCompatibleWithSemantic(varDecl->semantic, *varType->typeDenoter->Get()))
            {
                /* Write type cast with semantic keyword */
                Visit(varType);
                Write("(" + *semanticKeyword + ");");
            }
            else
            {
                /* Write semantic keyword */
                Write(*semanticKeyword + ";");
            }
        }
        EndLn();
    }
    else
        Error("failed to map semantic name to GLSL keyword", varDecl);
}

void GLSLGenerator::WriteGlobalInputSemantics()
{
    auto& varDeclRefs = GetProgram()->entryPointRef->inputSemantics.varDeclRefs;

    for (auto varDecl : varDeclRefs)
        WriteGlobalInputSemanticsVarDecl(varDecl);

    if (!varDeclRefs.empty())
        Blank();
}

void GLSLGenerator::WriteGlobalInputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Write global variable definition statement */
    BeginLn();
    {
        Write("in ");
        Visit(varDecl->declStmntRef->varType);
        Write(" " + varDecl->ident + ";");
    }
    EndLn();
}

/* --- Output semantics --- */

void GLSLGenerator::WriteLocalOutputSemantics()
{
    auto& varDeclRefs = GetProgram()->entryPointRef->outputSemantics.varDeclRefsSV;

    for (auto varDecl : varDeclRefs)
        WriteLocalOutputSemanticsVarDecl(varDecl);

    if (!varDeclRefs.empty())
        Blank();
}

void GLSLGenerator::WriteLocalOutputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Write local variable definition statement (without initialization) */
    BeginLn();
    {
        Visit(varDecl->declStmntRef->varType);
        Write(" " + varDecl->ident + ";");
    }
    EndLn();
}

void GLSLGenerator::WriteGlobalOutputSemantics()
{
    auto entryPoint = GetProgram()->entryPointRef;

    /* Write non-system-value output semantics */
    auto& varDeclRefs = entryPoint->outputSemantics.varDeclRefs;

    bool paramsWritten = (!varDeclRefs.empty());

    for (auto varDecl : varDeclRefs)
        WriteGlobalOutputSemanticsVarDecl(varDecl);

    /* Write 'SV_Target' system-value output semantics */
    if (shaderTarget_ == ShaderTarget::FragmentShader && versionOut_ > OutputShaderVersion::GLSL120)
    {
        /* Write 'SV_Target' system-value output semantics from variables */
        auto& varDeclRefs = entryPoint->outputSemantics.varDeclRefsSV;

        for (auto varDecl : varDeclRefs)
        {
            if (varDecl->semantic == Semantic::Target)
            {
                WriteGlobalOutputSemanticsVarDecl(varDecl, true);
                paramsWritten = true;
            }
        }

        /* Write 'SV_Target' system-value output semantic from entry point return semantic */
        if (entryPoint->semantic == Semantic::Target)
        {
            WriteGlobalOutputSemanticsSlot(
                entryPoint->returnType.get(),
                entryPoint->semantic,
                entryPoint->semantic.ToString()
            );
            paramsWritten = true;
        }
    }

    if (paramsWritten)
        Blank();

    //TODO: this is incomplete
    #if 0
    /* Track output statistics */
    if (stats_)
    {
        for (auto varDecl : GetProgram()->entryPointRef->outputSemantics.varDeclRefsSV)
        {
            if (varDecl->semantic.IsValid())
                stats_->fragmentTargets.push_back({ varDecl->ident, varDecl->semantic.Index() });
        }
    }
    #endif
}

void GLSLGenerator::WriteGlobalOutputSemanticsVarDecl(VarDecl* varDecl, bool useSemanticName)
{
    /* Write global variable definition statement */
    WriteGlobalOutputSemanticsSlot(
        varDecl->declStmntRef->varType.get(),
        varDecl->semantic,
        (useSemanticName ? varDecl->semantic.ToString() : varDecl->ident)
    );
}

void GLSLGenerator::WriteGlobalOutputSemanticsSlot(VarType* varType, const IndexedSemantic& semantic, const std::string& ident)
{
    /* Write global output semantic slot */
    BeginLn();
    {
        if (semantic.IsValid() && explicitBinding_)
            Write("layout(location = " + std::to_string(semantic.Index()) + ") out ");
        else
            Write("out ");

        Visit(varType);

        Write(" " + ident + ";");
    }
    EndLn();
}

void GLSLGenerator::WriteOutputSemanticsAssignment(Expr* ast)
{
    auto        entryPoint  = GetProgram()->entryPointRef;
    auto        semantic    = entryPoint->semantic;
    const auto& varDeclRefs = entryPoint->outputSemantics.varDeclRefsSV;

    /* Prefer variables from structure, rather than function return semantic */
    if (!varDeclRefs.empty())
    {
        /* Write system values */
        for (auto varDecl : varDeclRefs)
        {
            if (varDecl->semantic.IsValid())
            {
                if (auto semanticKeyword = SystemValueToKeyword(varDecl->semantic))
                {
                    BeginLn();
                    {
                        Write(*semanticKeyword + " = " + varDecl->ident + ";");
                    }
                    EndLn();
                }
            }
        }
    }
    else if (semantic.IsSystemValue() && ast)
    {
        if (auto semanticKeyword = SystemValueToKeyword(semantic))
        {
            BeginLn();
            {
                Write(*semanticKeyword);
                Write(" = ");
                Visit(ast);
                Write(";");
            }
            EndLn();
        }
        else
            Error("failed to map output semantic to GLSL keyword", entryPoint);
    }
    else if (shaderTarget_ != ShaderTarget::ComputeShader)
        Error("missing output semantic", ast);
}

/* --- Uniforms --- */

void GLSLGenerator::WriteGlobalUniforms()
{
    bool uniformsWritten = false;

    for (auto& param : GetProgram()->entryPointRef->parameters)
    {
        if (param->isUniform)
        {
            WriteGlobalUniformsParameter(param.get());
            uniformsWritten = true;
        }
    }

    if (uniformsWritten)
        Blank();
}

void GLSLGenerator::WriteGlobalUniformsParameter(VarDeclStmnt* param)
{
    /* Write uniform type */
    BeginLn();
    {
        Write("uniform ");
        Visit(param->varType);
        Write(" ");

        /* Write parameter identifier */
        if (param->varDecls.size() == 1)
            Visit(param->varDecls.front());
        else
            Error("invalid number of variables in function parameter", param);

        Write(";");
    }
    EndLn();
}

/* --- VarIdent --- */

const std::string& GLSLGenerator::FinalIdentFromVarIdent(VarIdent* ast)
{
    /* Check if a variable declaration has changed it's name during conversion */
    if (ast->symbolRef)
    {
        if (auto varDecl = ast->symbolRef->As<VarDecl>())
            return varDecl->ident;
    }

    /* Return default identifier */
    return ast->ident;
}

void GLSLGenerator::WriteVarIdent(VarIdent* ast, bool recursive)
{
    /* Write identifier */
    Write(FinalIdentFromVarIdent(ast));

    /* Write array index expressions */
    WriteArrayDims(ast->arrayIndices);

    if (recursive && ast->next)
    {
        Write(".");
        WriteVarIdent(ast->next.get());
    }
}

static TypeDenoterPtr GetTypeDenoterForSuffixVarIdent(const TypeDenoter& lhsTypeDen, VarIdent* ast)
{
    if (lhsTypeDen.IsBase())
    {
        /* Get type denoter from vector subscript */
        auto lhsBaseTypeDen = lhsTypeDen.As<BaseTypeDenoter>();
        auto subscriptDataType = SubscriptDataType(lhsBaseTypeDen->dataType, ast->ident);
        return std::make_shared<BaseTypeDenoter>(subscriptDataType);
    }
    else
    {
        /* Get type denoter from symbol reference (in VarIdent) */
        return ast->GetExplicitTypeDenoter(false)->Get();
    }
}

void GLSLGenerator::WriteSuffixVarIdentBegin(const TypeDenoter& lhsTypeDen, VarIdent* ast)
{
    /* First traverse sub nodes */
    if (ast->next)
    {
        /* Get type denoter of current VarIdent AST node */
        auto typeDenoter = GetTypeDenoterForSuffixVarIdent(lhsTypeDen, ast);
        WriteSuffixVarIdentBegin(*typeDenoter, ast->next.get());
    }

    /* Has this node a scalar type? */
    if (lhsTypeDen.IsScalar())
    {
        auto lhsBaseTypeDen = lhsTypeDen.As<BaseTypeDenoter>();
        WriteDataType(SubscriptDataType(lhsBaseTypeDen->dataType, ast->ident), false, ast);
        Write("(");
    }
}

void GLSLGenerator::WriteSuffixVarIdentEnd(const TypeDenoter& lhsTypeDen, VarIdent* ast)
{
    /* First write identifier */
    if (lhsTypeDen.IsScalar())
    {
        /* Close vector constructor */
        Write(")");
    }
    else
    {
        /* Write next identifier */
        Write(".");
        WriteVarIdent(ast, false);
    }

    /* Now traverse sub nodes */
    if (ast->next)
    {
        auto typeDenoter = GetTypeDenoterForSuffixVarIdent(lhsTypeDen, ast);
        WriteSuffixVarIdentEnd(*typeDenoter, ast->next.get());
    }
}

/* --- Type denoter --- */

void GLSLGenerator::WriteTypeModifiers(const std::set<TypeModifier>& typeModifiers)
{
    for (auto modifier : typeModifiers)
    {
        if (modifier == TypeModifier::Const)
            Write("const ");
    }
}

void GLSLGenerator::WriteDataType(DataType dataType, bool writePrecisionSpecifier, const AST* ast)
{
    /* Replace doubles with floats, if doubles are not supported */
    if (versionOut_ < OutputShaderVersion::GLSL400)
        dataType = DoubleToFloatDataType(dataType);

    /* Write optional precision specifier */
    if (writePrecisionSpecifier)
    {
        if (IsHalfRealType(dataType))
            Write("mediump ");
        else
            Write("highp ");
    }

    /* Map GLSL data type */
    if (auto keyword = DataTypeToGLSLKeyword(dataType))
        Write(*keyword);
    else
        Error("failed to map data type to GLSL keyword", ast);
}

void GLSLGenerator::WriteTypeDenoter(const TypeDenoter& typeDenoter, bool writePrecisionSpecifier, const AST* ast)
{
    try
    {
        if (typeDenoter.IsVoid())
        {
            /* Just write void type */
            Write("void");
        }
        else if (auto baseTypeDen = typeDenoter.As<BaseTypeDenoter>())
        {
            /* Map GLSL base type */
            WriteDataType(baseTypeDen->dataType, writePrecisionSpecifier, ast);
        }
        else if (auto bufferTypeDen = typeDenoter.As<BufferTypeDenoter>())
        {
            /* Get buffer type */
            auto bufferType = bufferTypeDen->bufferType;
            if (bufferType == BufferType::Undefined)
            {
                if (auto bufferDecl = bufferTypeDen->bufferDeclRef)
                    bufferType = bufferDecl->declStmntRef->bufferType;
                else
                    Error("missing reference to declaration in buffer type denoter", ast);
            }

            /* Convert buffer type to GLSL buffer (or sampler type) */
            if (auto keyword = BufferTypeToKeyword(bufferType, ast))
                Write(*keyword);
        }
        else if (auto samplerTypeDen = typeDenoter.As<SamplerTypeDenoter>())
        {
            /* Get sampler type */
            auto samplerType = samplerTypeDen->samplerType;
            if (samplerType == SamplerType::Undefined)
            {
                if (auto samplerDecl = samplerTypeDen->samplerDeclRef)
                    samplerType = samplerDecl->GetSamplerType();
                else
                    Error("missing reference to declaration in sampler type denoter", ast);
            }

            if (!IsSamplerStateType(samplerType))
            {
                /* Convert sampler type to GLSL sampler type */
                if (auto keyword = SamplerTypeToKeyword(samplerType, ast))
                    Write(*keyword);
            }
            else
                Error("can not translate sampler state object to GLSL sampler", ast);
        }
        else if (typeDenoter.IsStruct())
        {
            /* Write struct identifier */
            Write(typeDenoter.Ident());
        }
        else if (typeDenoter.IsAlias())
        {
            /* Write aliased type denoter */
            WriteTypeDenoter(typeDenoter.GetAliased(), writePrecisionSpecifier, ast);
        }
        else if (auto arrayTypeDen = typeDenoter.As<ArrayTypeDenoter>())
        {
            /* Write array type denoter */
            WriteTypeDenoter(*arrayTypeDen->baseTypeDenoter, writePrecisionSpecifier, ast);
            WriteArrayDims(arrayTypeDen->arrayDims);
        }
        else
            Error("failed to determine GLSL data type", ast);
    }
    catch (const Report& e)
    {
        throw e;
    }
    catch (const std::exception& e)
    {
        Error(e.what(), ast);
    }
}

/* --- Function call --- */

void GLSLGenerator::AssertIntrinsicNumArgs(FunctionCall* ast, std::size_t numArgsMin, std::size_t numArgsMax)
{
    auto numArgs = ast->arguments.size();
    if (numArgs < numArgsMin || numArgs > numArgsMax)
        Error("invalid number of arguments for intrinsic", ast);
}

void GLSLGenerator::WriteFunctionCallStandard(FunctionCall* ast)
{
    /* Write function name */
    if (ast->varIdent)
    {
        if (ast->intrinsic != Intrinsic::Undefined && !IsWrappedIntrinsic(ast->intrinsic))
        {
            /* Write GLSL intrinsic keyword */
            auto keyword = IntrinsicToGLSLKeyword(ast->intrinsic);
            if (keyword)
                Write(*keyword);
            else
                Error("failed to map intrinsic '" + ast->varIdent->LastVarIdent()->ToString() + "' to GLSL keyword", ast);
        }
        else
        {
            /* Write function identifier */
            Visit(ast->varIdent);
        }
    }
    else if (ast->typeDenoter)
    {
        /* Write type denoter */
        WriteTypeDenoter(*ast->typeDenoter, false, ast);
    }
    else
        Error("missing function name", ast);

    /* Write arguments */
    Write("(");

    for (size_t i = 0; i < ast->arguments.size(); ++i)
    {
        Visit(ast->arguments[i]);
        if (i + 1 < ast->arguments.size())
            Write(", ");
    }

    Write(")");
}

void GLSLGenerator::WriteFunctionCallIntrinsicMul(FunctionCall* ast)
{
    AssertIntrinsicNumArgs(ast, 2, 2);

    auto WriteMulArgument = [&](const ExprPtr& expr)
    {
        /*
        Determine if the expression needs extra brackets when converted from a function call "mul(lhs, rhs)" to a binary expression "lhs * rhs",
        e.g. "mul(wMatrix, pos + float4(0, 1, 0, 0))" -> "wMatrix * (pos + float4(0, 1, 0, 0))" needs extra brackets
        */
        auto type = expr->Type();
        if (type == AST::Types::TernaryExpr || type == AST::Types::BinaryExpr || type == AST::Types::UnaryExpr || type == AST::Types::PostUnaryExpr)
        {
            Write("(");
            Visit(expr);
            Write(")");
        }
        else
            Visit(expr);
    };

    /* Convert this function call into a multiplication */
    Write("(");
    {
        WriteMulArgument(ast->arguments[0]);
        Write(" * ");
        WriteMulArgument(ast->arguments[1]);
    }
    Write(")");
}

void GLSLGenerator::WriteFunctionCallIntrinsicRcp(FunctionCall* ast)
{
    AssertIntrinsicNumArgs(ast, 1, 1);

    /* Get type denoter of argument expression */
    auto& expr = ast->arguments.front();
    auto typeDenoter = expr->GetTypeDenoter()->Get();

    if (auto baseTypeDen = typeDenoter->As<BaseTypeDenoter>())
    {
        /* Convert this function call into a division */
        Write("(");
        {
            WriteTypeDenoter(*baseTypeDen, false, ast);
            Write("(");
            WriteLiteral("1", *baseTypeDen, ast);
            Write(") / (");
            Visit(expr);
        }
        Write("))");
    }
    else
        Error("invalid argument type for intrinsic 'rcp'", expr.get());
}

void GLSLGenerator::WriteFunctionCallIntrinsicClip(FunctionCall* ast)
{
    AssertIntrinsicNumArgs(ast, 1, 1);

    /* Get type denoter of argument expression */
    auto& expr = ast->arguments.front();
    auto typeDenoter = expr->GetTypeDenoter()->Get();

    if (auto baseTypeDen = typeDenoter->As<BaseTypeDenoter>())
    {
        /* Convert this function call into a condition */
        Write("if (");

        if (baseTypeDen->IsVector())
        {
            /* Convert to: 'any(lessThan(...))' */
            Write("any(lessThan(");

            auto binaryExpr = expr->As<BinaryExpr>();

            if (binaryExpr && binaryExpr->op == BinaryOp::Sub)
            {
                /* Convert to: 'any(lessThan(LHS-EXPR, RHS-EXPR))' */
                Visit(binaryExpr->lhsExpr);
                Write(", ");
                Visit(binaryExpr->rhsExpr);
            }
            else
            {
                /* Convert to: 'any(lessThan(EXPR, TYPE(0)))' */
                Visit(expr);
                Write(", ");
                WriteLiteral("0", *baseTypeDen, expr.get());
            }

            Write("))");
        }
        else if (baseTypeDen->IsScalar())
        {
            /* Convert to: 'EXPR < ...' */
            auto binaryExpr = expr->As<BinaryExpr>();

            if (binaryExpr && binaryExpr->op == BinaryOp::Sub)
            {
                /* Convert to: 'LHS-EXPR < RHS-EXPR' */
                Visit(binaryExpr->lhsExpr);
                Write(" < ");
                Visit(binaryExpr->rhsExpr);
            }
            else
            {
                /* Convert to: 'EXPR < TYPE(0)' */
                Visit(expr);
                Write(" < ");
                WriteLiteral("0", *baseTypeDen, expr.get());
            }
        }
        else
            Error("invalid argument type for intrinsic 'clip'", expr.get());
    }
    else
        Error("invalid argument type for intrinsic 'clip'", expr.get());

    Write(")");
    
    /* Write if-body (we are still inside an active line, so first 'EndLn', then 'BeginLn') */
    EndLn();
    IncIndent();
    BeginLn();
    Write("discard");
    DecIndent();
}

void GLSLGenerator::WriteFunctionCallIntrinsicAtomic(FunctionCall* ast)
{
    AssertIntrinsicNumArgs(ast, 2, 3);

    //TODO: move this to another visitor (e.g. "GLSLConverter" or the like) which does some transformation on the AST
    /* Find atomic intrinsic mapping */
    auto keyword = IntrinsicToGLSLKeyword(ast->intrinsic);
    if (keyword)
    {
        /* Write function call */
        if (ast->arguments.size() >= 3)
        {
            Visit(ast->arguments[2]);
            Write(" = ");
        }
        Write(*keyword + "(");
        Visit(ast->arguments[0]);
        Write(", ");
        Visit(ast->arguments[1]);
        Write(")");
    }
    else
        Error("failed to map intrinsic '" + ast->varIdent->ToString() + "' to GLSL keyword", ast);
}

/* --- Intrinsics wrapper functions --- */

void GLSLGenerator::WriteWrapperIntrinsics()
{
    auto program = GetProgram();

    auto Used = [program](Intrinsic intr) -> IntrinsicUsage*
    {
        auto it = program->usedIntrinsics.find(intr);
        return (it != program->usedIntrinsics.end() ? &(it->second) : nullptr);
    };

    if (auto usage = Used(Intrinsic::Clip))
        WriteWrapperIntrinsicsClip(*usage);
}

void GLSLGenerator::WriteWrapperIntrinsicsClip(const IntrinsicUsage& usage)
{
    //TODO: make this boolean optional for the user
    bool writeCompact = true;

    bool wrappersWritten = false;

    for (const auto& argList : usage.argLists)
    {
        auto arg0Type = (!argList.argTypes.empty() ? argList.argTypes.front() : DataType::Undefined);
        
        if (IsScalarType(arg0Type) || IsVectorType(arg0Type))
        {
            BeginLn();
            {
                /* Write function signature */
                Write("void clip(");
                WriteDataType(arg0Type, IsESSL());
                Write(" x)");

                /* Write function body */
                WriteScopeOpen(writeCompact);
                {
                    Write("if (");

                    if (IsScalarType(arg0Type))
                    {
                        Write("x < ");
                        WriteLiteral("0", arg0Type);
                    }
                    else if (IsVectorType(arg0Type))
                    {
                        Write("any(lessThan(x, ");
                        WriteDataType(arg0Type);
                        Write("(0)))");
                    }

                    Write(")");
                    WriteScopeOpen(writeCompact);
                    {
                        Write("discard;");
                    }
                    WriteScopeClose(writeCompact);
                }
                WriteScopeClose(writeCompact);
            }
            EndLn();

            wrappersWritten = true;
        }
    }

    if (wrappersWritten)
        Blank();
}

/* --- Structure --- */

bool GLSLGenerator::WriteStructDecl(StructDecl* ast, bool writeSemicolon, bool allowNestedStruct)
{
    /* Is this a non-nested structure or are nested structures allowed in the current context? */
    if (!ast->flags(StructDecl::isNestedStruct) || allowNestedStruct)
    {
        /* Is this an interface block or a standard structure? */
        if (ast->flags(StructDecl::isShaderInput) || ast->flags(StructDecl::isShaderOutput))
        {
            /* Write structure as shader input/output block */
            return WriteStructDeclInputOutputBlock(ast);
        }
        else
        {
            /* Write standard structure declaration */
            return WriteStructDeclStandard(ast, writeSemicolon);
        }
    }
    else if (!writeSemicolon)
    {
        /* Do not end line here with "EndLn" */
        BeginLn();
        Write(ast->ident + " ");
    }
    return false;
}

bool GLSLGenerator::WriteStructDeclStandard(StructDecl* ast, bool writeSemicolon)
{
    /* Write structure signature */
    BeginLn();
    {
        Write("struct");
        if (!ast->ident.empty())
            Write(' ' + ast->ident);
    }
    EndLn();

    /* Write structure members */
    WriteScopeOpen();
    {
        WriteStructDeclMembers(ast);
    }
    WriteScopeClose(false, writeSemicolon);

    return true;
}

bool GLSLGenerator::WriteStructDeclInputOutputBlock(StructDecl* ast)
{
    /* Only write input/output block if there is a non-system-value member */
    if (!ast->HasNonSystemValueMembers())
        return false;
    
    /* Write this structure as interface block (if structure doesn't need to be resolved) */
    BeginLn();
    {
        if (ast->flags(StructDecl::isShaderInput))
            Write("in ");
        else
            Write("out ");
        Write(ast->ident);
    }
    EndLn();

    WriteScopeOpen();
    {
        isInsideInterfaceBlock_ = true;

        WriteStructDeclMembers(ast);

        isInsideInterfaceBlock_ = false;
    }
    WriteScopeClose();

    WriteLn(ast->aliasName + ";");

    return true;
}

void GLSLGenerator::WriteStructDeclMembers(StructDecl* ast)
{
    if (ast->baseStructRef)
        WriteStructDeclMembers(ast->baseStructRef);
    Visit(ast->members);
}

/* --- BufferDecl --- */

void GLSLGenerator::WriteBufferDecl(BufferDecl* ast)
{
    if (ast->flags(AST::isReachable))
    {
        if (IsTextureBufferType(ast->declStmntRef->bufferType))
            WriteBufferDeclTexture(ast);
        else
            WriteBufferDeclStorageBuffer(ast);
        Blank();
    }
}

void GLSLGenerator::WriteBufferDeclTexture(BufferDecl* ast)
{
    /* Determine GLSL sampler type (or VKSL texture type) */
    auto bufferTypeKeyword = BufferTypeToKeyword(ast->declStmntRef->bufferType, ast->declStmntRef);
    if (!bufferTypeKeyword)
        return;

    BeginLn();
    {
        /* Write uniform declaration */
        if (explicitBinding_)
        {
            if (auto slotRegister = Register::GetForTarget(ast->slotRegisters, shaderTarget_))
                Write("layout(binding = " + std::to_string(slotRegister->slot) + ") ");
        }

        Write("uniform ");

        /* Write sampler type and identifier */
        if (auto genericTypeDen = ast->declStmntRef->genericTypeDenoter)
        {
            if (auto baseTypeDen = genericTypeDen->As<BaseTypeDenoter>())
            {
                if (IsIntType(baseTypeDen->dataType))
                    Write("i");
                else if (IsUIntType(baseTypeDen->dataType))
                    Write("u");
            }
        }

        Write(*bufferTypeKeyword + " " + ast->ident + ";");
    }
    EndLn();
}

void GLSLGenerator::WriteBufferDeclStorageBuffer(BufferDecl* ast)
{
    /* Determine GLSL buffer type */
    auto bufferTypeKeyword = BufferTypeToKeyword(ast->declStmntRef->bufferType, ast->declStmntRef);
    if (!bufferTypeKeyword)
        return;

    /* Write buffer declaration */
    BeginLn();
    {
        Write("layout(std430");

        if (explicitBinding_)
        {
            if (auto slotRegister = Register::GetForTarget(ast->slotRegisters, shaderTarget_))
                Write(", binding = " + std::to_string(slotRegister->slot));
        }

        Write(") " + *bufferTypeKeyword + " " + nameManglingPrefix_ + ast->ident);
    }
    EndLn();

    /* Write buffer array (of variable size) */
    WriteScopeOpen();
    {
        BeginLn();
        {
            /* Write optional memory type qualifier */
            if (!IsRWBufferType(ast->declStmntRef->bufferType))
                Write("readonly ");

            /* Write generic type denoterand identifier */
            auto genericTypeDen = ast->declStmntRef->GetGenericTypeDenoter();
            WriteTypeDenoter(*genericTypeDen, IsESSL(), ast);
            Write(" " + ast->ident + "[];");
        }
        EndLn();
    }
    WriteScopeClose(false, true);
}

/* --- Misc --- */

void GLSLGenerator::WriteStmntComment(Stmnt* ast, bool insertBlank)
{
    if (ast && !ast->comment.empty())
    {
        if (insertBlank)
            Blank();
        WriteComment(ast->comment);
    }
}

void GLSLGenerator::WriteStmntList(const std::vector<StmntPtr>& stmnts, bool isGlobalScope)
{
    if (preserveComments_)
    {
        /* Write statements with optional commentaries */
        for (std::size_t i = 0; i < stmnts.size(); ++i)
        {
            auto ast = stmnts[i].get();

            if (!isGlobalScope || ast->flags(AST::isReachable))
                WriteStmntComment(ast, (!isGlobalScope && (i > 0)));

            Visit(ast);
        }
    }
    else
    {
        /* Write statements only */
        Visit(stmnts);
    }
}

void GLSLGenerator::WriteParameter(VarDeclStmnt* ast)
{
    /* Write input modifier */
    if (ast->IsOutput())
    {
        if (ast->IsInput())
            Write("inout ");
        else
            Write("out ");
    }

    /* Write type modifiers */
    WriteTypeModifiers(ast->typeModifiers);

    /* Write parameter type */
    Visit(ast->varType);
    Write(" ");

    /* Write parameter identifier */
    if (ast->varDecls.size() == 1)
        Visit(ast->varDecls.front());
    else
        Error("invalid number of variables in function parameter", ast);
}

void GLSLGenerator::WriteScopedStmnt(Stmnt* ast)
{
    if (ast)
    {
        if (ast->Type() != AST::Types::CodeBlockStmnt)
        {
            IncIndent();
            Visit(ast);
            DecIndent();
        }
        else
            Visit(ast);
    }
}

void GLSLGenerator::WriteArrayDims(const std::vector<ExprPtr>& arrayDims)
{
    for (auto& dim : arrayDims)
    {
        Write("[");
        Visit(dim);
        Write("]");
    }
}

void GLSLGenerator::WriteLiteral(const std::string& value, const BaseTypeDenoter& baseTypeDen, const AST* ast)
{
    if (baseTypeDen.IsScalar())
    {
        Write(value);

        switch (baseTypeDen.dataType)
        {
            case DataType::UInt:
                Write("u");
                break;
            case DataType::Float:
                if (value.find_first_of(".eE") == std::string::npos)
                    Write(".0");
                Write("f");
                break;
            default:
                break;
        }
    }
    else if (baseTypeDen.IsVector())
    {
        WriteDataType(baseTypeDen.dataType, false, ast);
        Write("(");
        Write(value);
        Write(")");
    }
    else
        Error("failed to write type denoter for literal '" + value + "'", ast);
}


} // /namespace Xsc



// ================================================================================
